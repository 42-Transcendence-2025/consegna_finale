services:
  django-base:
    image: django_base_image
    container_name: django_base_image
    build:
      context: ./backend
      dockerfile: ./Dockerfile.django.base

  matchmaking:
    build:
      context: ./backend/matchmaking
    container_name: matchmaking
    depends_on:
      postgres_db:
        condition: service_healthy
      django-base:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - APP_PORT=8001
      - SIGNING_KEY=${SIGNING_KEY}
      - DATABASE_URL=postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@postgres_db:5432/main_db
      - REDIS_URL=redis://redis:6379
    networks:
      - transcendence
    ports:
      - 8001:8001
    volumes:
      - ./backend/matchmaking:/app # TODO: remove this on prod and use COPY instead
      - matchmaking_venv:/venv

  pong_game:
    build:
      context: ./backend/pong_game
    container_name: pong_game
    depends_on:
      postgres_db:
        condition: service_healthy
      django-base:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - APP_PORT=8002
      - SIGNING_KEY=${SIGNING_KEY}
      - DATABASE_URL=postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@postgres_db:5432/main_db
      - REDIS_URL=redis://redis:6379
    networks:
      - transcendence
    ports:
      - 8002:8002
    volumes:
      - ./backend/pong_game:/app # TODO: remove this on prod and use COPY instead
      - pong_game_venv:/venv

# `user_management` SHOULD BE THE FIRST OF THE 3 SERVICES TO START, BECAUSE IT HAS TO MAKE DB MIGRATIONS
  user_management:
    build:
      context: ./backend/user_management
    container_name: user_management
    command: >
        sh -c "python manage.py migrate --noinput &&
                python manage.py runserver 0.0.0.0:$$APP_PORT"
    depends_on:
      postgres_db:
        condition: service_healthy
      django-base:
        condition: service_started
    environment:
      - APP_PORT=8003
      - SIGNING_KEY=${SIGNING_KEY}
      - DATABASE_URL=postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@postgres_db:5432/main_db
    networks:
      - transcendence
    ports:
      - 8003:8003
    volumes:
      - ./backend/user_management:/app # TODO: remove this on prod and use COPY instead
      - user_management_venv:/venv
      - ./frontend/assets/user_uploads:/app/frontend/assets/user_uploads # Mount for profile image uploads

  profile_service:
    build:
      context: ./backend/profile_service
    container_name: profile_service
    depends_on:
      postgres_db:
        condition: service_healthy
      django-base:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - APP_PORT=8004
      - SIGNING_KEY=${SIGNING_KEY}
      - DATABASE_URL=postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@postgres_db:5432/main_db
      - REDIS_URL=redis://redis:6379
    networks:
      - transcendence
    ports:
      - 8004:8004
    volumes:
      - ./backend/profile_service:/app # TODO: remove this on prod and use COPY instead
      - profile_service_venv:/venv

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    depends_on:
      user_management:
        condition: service_started
      matchmaking:
        condition: service_started
      pong_game:
        condition: service_started
    networks:
      - transcendence
    ports:
      - 8000:8080
    restart: always
    volumes:
      - ./frontend:/app # TODO: remove this on prod and use COPY instead


  postgres_db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: main_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - transcendence
    ports:
      - 5432:5432
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data


  redis:
    image: redis:7
    container_name: redis
    networks:
      - transcendence
    ports:
      - 9999:6379 # TODO: change the host port if needed
    restart: always
    volumes:
      - redis_data:/data

networks:
  transcendence:

volumes:
    postgres_data:
    redis_data:

    matchmaking_venv:
    pong_game_venv:
    user_management_venv:
    profile_service_venv:
